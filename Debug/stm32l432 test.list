
stm32l432 test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df4  08003df4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003df4  08003df4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df4  08003df4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000014  08003e10  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003e10  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c88d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c0d  00000000  00000000  0002c8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020c7b  00000000  00000000  0002fb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009162  00000000  00000000  000507f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cca57  00000000  00000000  00059955  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001263ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  00126428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003d9c 	.word	0x08003d9c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08003d9c 	.word	0x08003d9c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80001d0:	4b37      	ldr	r3, [pc, #220]	; (80002b0 <main+0xe4>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80001d6:	4b36      	ldr	r3, [pc, #216]	; (80002b0 <main+0xe4>)
 80001d8:	2212      	movs	r2, #18
 80001da:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001dc:	4b34      	ldr	r3, [pc, #208]	; (80002b0 <main+0xe4>)
 80001de:	2200      	movs	r2, #0
 80001e0:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x446<<5;
 80001e2:	4b33      	ldr	r3, [pc, #204]	; (80002b0 <main+0xe4>)
 80001e4:	f648 02c0 	movw	r2, #35008	; 0x88c0
 80001e8:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0;
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <main+0xe4>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 80001f0:	4b2f      	ldr	r3, [pc, #188]	; (80002b0 <main+0xe4>)
 80001f2:	f648 02c0 	movw	r2, #35008	; 0x88c0
 80001f6:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80001f8:	4b2d      	ldr	r3, [pc, #180]	; (80002b0 <main+0xe4>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001fe:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <main+0xe4>)
 8000200:	2200      	movs	r2, #0
 8000202:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000204:	4b2a      	ldr	r3, [pc, #168]	; (80002b0 <main+0xe4>)
 8000206:	2201      	movs	r2, #1
 8000208:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800020a:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <main+0xe4>)
 800020c:	2214      	movs	r2, #20
 800020e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000210:	4927      	ldr	r1, [pc, #156]	; (80002b0 <main+0xe4>)
 8000212:	4828      	ldr	r0, [pc, #160]	; (80002b4 <main+0xe8>)
 8000214:	f001 fd6f 	bl	8001cf6 <HAL_CAN_ConfigFilter>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fbcd 	bl	80009b6 <HAL_Init>

  /* USER CODE BEGIN Init */
  TxHeader.IDE = CAN_ID_STD;
 800021c:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <main+0xec>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x103;
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <main+0xec>)
 8000224:	f240 1203 	movw	r2, #259	; 0x103
 8000228:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <main+0xec>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <main+0xec>)
 8000232:	2202      	movs	r2, #2
 8000234:	611a      	str	r2, [r3, #16]

  TxData[0] = 50;
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <main+0xf0>)
 8000238:	2232      	movs	r2, #50	; 0x32
 800023a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <main+0xf0>)
 800023e:	22aa      	movs	r2, #170	; 0xaa
 8000240:	705a      	strb	r2, [r3, #1]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f847 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f993 	bl	8000570 <MX_GPIO_Init>
  MX_DMA_Init();
 800024a:	f000 f973 	bl	8000534 <MX_DMA_Init>
  MX_ADC1_Init();
 800024e:	f000 f8a1 	bl	8000394 <MX_ADC1_Init>
  MX_LPTIM1_Init();
 8000252:	f000 f93b 	bl	80004cc <MX_LPTIM1_Init>
  MX_CAN1_Init();
 8000256:	f000 f903 	bl	8000460 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 800025a:	2204      	movs	r2, #4
 800025c:	4918      	ldr	r1, [pc, #96]	; (80002c0 <main+0xf4>)
 800025e:	4819      	ldr	r0, [pc, #100]	; (80002c4 <main+0xf8>)
 8000260:	f000 ff7e 	bl	8001160 <HAL_ADC_Start_DMA>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <main+0xa2>
	  Error_Handler();
 800026a:	f000 fa0f 	bl	800068c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800026e:	2102      	movs	r1, #2
 8000270:	4815      	ldr	r0, [pc, #84]	; (80002c8 <main+0xfc>)
 8000272:	f002 fb89 	bl	8002988 <HAL_GPIO_TogglePin>
	  fuseState[0] = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000276:	2101      	movs	r1, #1
 8000278:	4813      	ldr	r0, [pc, #76]	; (80002c8 <main+0xfc>)
 800027a:	f002 fb55 	bl	8002928 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <main+0x100>)
 8000284:	601a      	str	r2, [r3, #0]

	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <main+0x104>)
 8000288:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <main+0xf0>)
 800028a:	490b      	ldr	r1, [pc, #44]	; (80002b8 <main+0xec>)
 800028c:	4809      	ldr	r0, [pc, #36]	; (80002b4 <main+0xe8>)
 800028e:	f001 fdfc 	bl	8001e8a <HAL_CAN_AddTxMessage>

	  HAL_ADC_Start(&hadc1);
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <main+0xf8>)
 8000294:	f000 ff00 	bl	8001098 <HAL_ADC_Start>

	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <main+0x104>)
 800029a:	4a08      	ldr	r2, [pc, #32]	; (80002bc <main+0xf0>)
 800029c:	4906      	ldr	r1, [pc, #24]	; (80002b8 <main+0xec>)
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <main+0xe8>)
 80002a0:	f001 fdf3 	bl	8001e8a <HAL_CAN_AddTxMessage>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0e1      	beq.n	800026e <main+0xa2>
		  Error_Handler();
 80002aa:	f000 f9ef 	bl	800068c <Error_Handler>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80002ae:	e7de      	b.n	800026e <main+0xa2>
 80002b0:	20000134 	.word	0x20000134
 80002b4:	20000168 	.word	0x20000168
 80002b8:	20000190 	.word	0x20000190
 80002bc:	2000012c 	.word	0x2000012c
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000034 	.word	0x20000034
 80002c8:	48000400 	.word	0x48000400
 80002cc:	20000118 	.word	0x20000118
 80002d0:	2000015c 	.word	0x2000015c

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0ac      	sub	sp, #176	; 0xb0
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002de:	2244      	movs	r2, #68	; 0x44
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 fd52 	bl	8003d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2254      	movs	r2, #84	; 0x54
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fd44 	bl	8003d8c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000312:	2300      	movs	r3, #0
 8000314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800031c:	4618      	mov	r0, r3
 800031e:	f002 fc43 	bl	8002ba8 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000328:	f000 f9b0 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000330:	2301      	movs	r3, #1
 8000332:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 f84e 	bl	80033e8 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f99b 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_ADC;
 8000356:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800035a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800035c:	2300      	movs	r3, #0
 800035e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000360:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000364:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f003 fa09 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000374:	f000 f98a 	bl	800068c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000378:	f44f 7000 	mov.w	r0, #512	; 0x200
 800037c:	f002 fbbe 	bl	8002afc <HAL_PWREx_ControlVoltageScaling>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000386:	f000 f981 	bl	800068c <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	37b0      	adds	r7, #176	; 0xb0
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039a:	463b      	mov	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003aa:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003ac:	4a2a      	ldr	r2, [pc, #168]	; (8000458 <MX_ADC1_Init+0xc4>)
 80003ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003b6:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003bc:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c8:	4b22      	ldr	r3, [pc, #136]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003dc:	2201      	movs	r2, #1
 80003de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_ADC1_Init+0xc0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_ADC1_Init+0xc0>)
 8000404:	2200      	movs	r2, #0
 8000406:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_ADC1_Init+0xc0>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000410:	4810      	ldr	r0, [pc, #64]	; (8000454 <MX_ADC1_Init+0xc0>)
 8000412:	f000 fcfb 	bl	8000e0c <HAL_ADC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800041c:	f000 f936 	bl	800068c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_ADC1_Init+0xc8>)
 8000422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000424:	2306      	movs	r3, #6
 8000426:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042c:	237f      	movs	r3, #127	; 0x7f
 800042e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000430:	2304      	movs	r3, #4
 8000432:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_ADC1_Init+0xc0>)
 800043e:	f000 ff1d 	bl	800127c <HAL_ADC_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000448:	f000 f920 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000034 	.word	0x20000034
 8000458:	50040000 	.word	0x50040000
 800045c:	14f00020 	.word	0x14f00020

08000460 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MX_CAN1_Init+0x64>)
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_CAN1_Init+0x68>)
 8000468:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_CAN1_Init+0x64>)
 800046c:	2210      	movs	r2, #16
 800046e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_CAN1_Init+0x64>)
 8000472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000476:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_CAN1_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_CAN1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_CAN1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_CAN1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_CAN1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_CAN1_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_CAN1_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_CAN1_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_CAN1_Init+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_CAN1_Init+0x64>)
 80004b0:	f001 fb26 	bl	8001b00 <HAL_CAN_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80004ba:	f000 f8e7 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000168 	.word	0x20000168
 80004c8:	40006400 	.word	0x40006400

080004cc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004d2:	4a17      	ldr	r2, [pc, #92]	; (8000530 <MX_LPTIM1_Init+0x64>)
 80004d4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004f4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_LPTIM1_Init+0x60>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_LPTIM1_Init+0x60>)
 8000504:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_COMP1;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_LPTIM1_Init+0x60>)
 800050c:	2201      	movs	r2, #1
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_LPTIM1_Init+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_LPTIM1_Init+0x60>)
 8000518:	f002 fa50 	bl	80029bc <HAL_LPTIM_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8000522:	f000 f8b3 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000098 	.word	0x20000098
 8000530:	40007c00 	.word	0x40007c00

08000534 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_DMA_Init+0x38>)
 800053c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <MX_DMA_Init+0x38>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6493      	str	r3, [r2, #72]	; 0x48
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_DMA_Init+0x38>)
 8000548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	200b      	movs	r0, #11
 8000558:	f001 fe4d 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055c:	200b      	movs	r0, #11
 800055e:	f001 fe66 	bl	800222e <HAL_NVIC_EnableIRQ>

}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <MX_GPIO_Init+0xd0>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a2d      	ldr	r2, [pc, #180]	; (8000640 <MX_GPIO_Init+0xd0>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0xd0>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a27      	ldr	r2, [pc, #156]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f002 f9cb 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2102      	movs	r1, #2
 80005c6:	481f      	ldr	r0, [pc, #124]	; (8000644 <MX_GPIO_Init+0xd4>)
 80005c8:	f002 f9c6 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005cc:	2340      	movs	r3, #64	; 0x40
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f002 f837 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f002 f828 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000604:	2301      	movs	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_GPIO_Init+0xd4>)
 8000618:	f002 f81c 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800061c:	2302      	movs	r3, #2
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_GPIO_Init+0xd4>)
 8000634:	f002 f80e 	bl	8002654 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	raw = raw < ADC_buffer[0] ? ADC_buffer[0] : raw;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_ADC_ConvCpltCallback+0x28>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_ADC_ConvCpltCallback+0x2c>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	4293      	cmp	r3, r2
 800066e:	bf38      	it	cc
 8000670:	4613      	movcc	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000676:	801a      	strh	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000000 	.word	0x20000000
 8000688:	20000030 	.word	0x20000030

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6613      	str	r3, [r2, #96]	; 0x60
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6593      	str	r3, [r2, #88]	; 0x58
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <HAL_ADC_MspInit+0xcc>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d14f      	bne.n	80007a6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000706:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 800070c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <HAL_ADC_MspInit+0xd0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800073a:	230b      	movs	r3, #11
 800073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f001 ff82 	bl	8002654 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000752:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <HAL_ADC_MspInit+0xd8>)
 8000754:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000780:	2220      	movs	r2, #32
 8000782:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800078c:	f001 fd6a 	bl	8002264 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000796:	f7ff ff79 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 800079e:	64da      	str	r2, [r3, #76]	; 0x4c
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <HAL_ADC_MspInit+0xd4>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007a6:	bf00      	nop
 80007a8:	3728      	adds	r7, #40	; 0x28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	50040000 	.word	0x50040000
 80007b4:	40021000 	.word	0x40021000
 80007b8:	200000d0 	.word	0x200000d0
 80007bc:	40020008 	.word	0x40020008

080007c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a18      	ldr	r2, [pc, #96]	; (8000840 <HAL_CAN_MspInit+0x80>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d129      	bne.n	8000836 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_CAN_MspInit+0x84>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_CAN_MspInit+0x84>)
 80007e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ec:	6593      	str	r3, [r2, #88]	; 0x58
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_CAN_MspInit+0x84>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_CAN_MspInit+0x84>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_CAN_MspInit+0x84>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_CAN_MspInit+0x84>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000824:	2309      	movs	r3, #9
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 ff0f 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40006400 	.word	0x40006400
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_LPTIM_MspInit+0x38>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10b      	bne.n	8000872 <HAL_LPTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_LPTIM_MspInit+0x3c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <HAL_LPTIM_MspInit+0x3c>)
 8000860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <HAL_LPTIM_MspInit+0x3c>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40007c00 	.word	0x40007c00
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f8be 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <DMA1_Channel1_IRQHandler+0x10>)
 80008ea:	f001 fdd3 	bl	8002494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d0 	.word	0x200000d0

080008f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <SystemInit+0x64>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <SystemInit+0x64>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <SystemInit+0x68>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <SystemInit+0x68>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <SystemInit+0x68>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <SystemInit+0x68>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <SystemInit+0x68>)
 8000924:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000928:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800092c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <SystemInit+0x68>)
 8000930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000934:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <SystemInit+0x68>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <SystemInit+0x68>)
 800093c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000940:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SystemInit+0x68>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <SystemInit+0x64>)
 800094a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800094e:	609a      	str	r2, [r3, #8]
#endif
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00
 8000960:	40021000 	.word	0x40021000

08000964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000968:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800096a:	e003      	b.n	8000974 <LoopCopyDataInit>

0800096c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800096e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000970:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000972:	3104      	adds	r1, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000978:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800097a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800097c:	d3f6      	bcc.n	800096c <CopyDataInit>
	ldr	r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000980:	e002      	b.n	8000988 <LoopFillZerobss>

08000982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000982:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000984:	f842 3b04 	str.w	r3, [r2], #4

08000988 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <LoopForever+0x16>)
	cmp	r2, r3
 800098a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800098c:	d3f9      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098e:	f7ff ffb3 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f003 f9d7 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000996:	f7ff fc19 	bl	80001cc <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800099c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80009a0:	08003dfc 	.word	0x08003dfc
	ldr	r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009a8:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80009ac:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80009b0:	200001c8 	.word	0x200001c8

080009b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_IRQHandler>

080009b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f001 fc0d 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 f80e 	bl	80009e8 <HAL_InitTick>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	e001      	b.n	80009dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d8:	f7ff fe60 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_InitTick+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d022      	beq.n	8000a42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_InitTick+0x6c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_InitTick+0x68>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fc1a 	bl	800224a <HAL_SYSTICK_Config>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10f      	bne.n	8000a3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d809      	bhi.n	8000a36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2a:	f001 fbe4 	bl	80021f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_InitTick+0x70>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	e007      	b.n	8000a46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e004      	b.n	8000a46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e001      	b.n	8000a46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000010 	.word	0x20000010
 8000a54:	20000008 	.word	0x20000008
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a6c:	6013      	str	r3, [r2, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	200001c4 	.word	0x200001c4
 8000a7c:	20000010 	.word	0x20000010

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200001c4 	.word	0x200001c4

08000a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b00:	b490      	push	{r4, r7}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3360      	adds	r3, #96	; 0x60
 8000b12:	461a      	mov	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b1c:	6822      	ldr	r2, [r4, #0]
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <LL_ADC_SetOffset+0x40>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc90      	pop	{r4, r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	03fff000 	.word	0x03fff000

08000b44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b44:	b490      	push	{r4, r7}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3360      	adds	r3, #96	; 0x60
 8000b52:	461a      	mov	r2, r3
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc90      	pop	{r4, r7}
 8000b6a:	4770      	bx	lr

08000b6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b6c:	b490      	push	{r4, r7}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3360      	adds	r3, #96	; 0x60
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc90      	pop	{r4, r7}
 8000b9a:	4770      	bx	lr

08000b9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bc2:	b490      	push	{r4, r7}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3330      	adds	r3, #48	; 0x30
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	4413      	add	r3, r2
 8000be0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000be2:	6822      	ldr	r2, [r4, #0]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	211f      	movs	r1, #31
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	0e9b      	lsrs	r3, r3, #26
 8000bf8:	f003 011f 	and.w	r1, r3, #31
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc90      	pop	{r4, r7}
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c14:	b490      	push	{r4, r7}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3314      	adds	r3, #20
 8000c24:	461a      	mov	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	0e5b      	lsrs	r3, r3, #25
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	4413      	add	r3, r2
 8000c32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000c34:	6822      	ldr	r2, [r4, #0]
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0d1b      	lsrs	r3, r3, #20
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	2107      	movs	r1, #7
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	0d1b      	lsrs	r3, r3, #20
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc90      	pop	{r4, r7}
 8000c62:	4770      	bx	lr

08000c64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0318 	and.w	r3, r3, #24
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c88:	40d9      	lsrs	r1, r3
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c92:	431a      	orrs	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	0007ffff 	.word	0x0007ffff

08000cac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	6093      	str	r3, [r2, #8]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ce4:	d101      	bne.n	8000cea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d34:	d101      	bne.n	8000d3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <LL_ADC_IsEnabled+0x18>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <LL_ADC_IsEnabled+0x1a>
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000da6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000daa:	f043 0204 	orr.w	r2, r3, #4
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d101      	bne.n	8000dd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d101      	bne.n	8000dfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e12a      	b.n	800107c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fc55 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff3f 	bl	8000cd0 <LL_ADC_IsDeepPowerDownEnabled>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff25 	bl	8000cac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff5a 	bl	8000d20 <LL_ADC_IsInternalRegulatorEnabled>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d113      	bne.n	8000e9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff3e 	bl	8000cf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e7c:	4b81      	ldr	r3, [pc, #516]	; (8001084 <HAL_ADC_Init+0x278>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	099b      	lsrs	r3, r3, #6
 8000e82:	4a81      	ldr	r2, [pc, #516]	; (8001088 <HAL_ADC_Init+0x27c>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e8c:	e002      	b.n	8000e94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f9      	bne.n	8000e8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff3e 	bl	8000d20 <LL_ADC_IsInternalRegulatorEnabled>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eae:	f043 0210 	orr.w	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f043 0201 	orr.w	r2, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff77 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 8000ed0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80c5 	bne.w	800106a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 80c1 	bne.w	800106a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ef0:	f043 0202 	orr.w	r2, r3, #2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff37 	bl	8000d70 <LL_ADC_IsEnabled>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10b      	bne.n	8000f20 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f08:	4860      	ldr	r0, [pc, #384]	; (800108c <HAL_ADC_Init+0x280>)
 8000f0a:	f7ff ff31 	bl	8000d70 <LL_ADC_IsEnabled>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	485d      	ldr	r0, [pc, #372]	; (8001090 <HAL_ADC_Init+0x284>)
 8000f1c:	f7ff fdbc 	bl	8000a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7e5b      	ldrb	r3, [r3, #25]
 8000f24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000f30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000f36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d106      	bne.n	8000f5c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	3b01      	subs	r3, #1
 8000f54:	045b      	lsls	r3, r3, #17
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d009      	beq.n	8000f78 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <HAL_ADC_Init+0x288>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff14 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 8000f96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff21 	bl	8000de4 <LL_ADC_INJ_IsConversionOngoing>
 8000fa2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d13d      	bne.n	8001026 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d13a      	bne.n	8001026 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fb4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fbc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fcc:	f023 0302 	bic.w	r3, r3, #2
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	69b9      	ldr	r1, [r7, #24]
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d118      	bne.n	8001016 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fee:	f023 0304 	bic.w	r3, r3, #4
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ffa:	4311      	orrs	r1, r2
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001000:	4311      	orrs	r1, r2
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001006:	430a      	orrs	r2, r1
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	611a      	str	r2, [r3, #16]
 8001014:	e007      	b.n	8001026 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10c      	bne.n	8001048 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f023 010f 	bic.w	r1, r3, #15
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
 8001046:	e007      	b.n	8001058 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020f 	bic.w	r2, r2, #15
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105c:	f023 0303 	bic.w	r3, r3, #3
 8001060:	f043 0201 	orr.w	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	655a      	str	r2, [r3, #84]	; 0x54
 8001068:	e007      	b.n	800107a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800107a:	7ffb      	ldrb	r3, [r7, #31]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000008 	.word	0x20000008
 8001088:	053e2d63 	.word	0x053e2d63
 800108c:	50040000 	.word	0x50040000
 8001090:	50040300 	.word	0x50040300
 8001094:	fff0c007 	.word	0xfff0c007

08001098 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe8a 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d14f      	bne.n	8001150 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Start+0x26>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e04b      	b.n	8001156 <HAL_ADC_Start+0xbe>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc2c 	bl	8001924 <ADC_Enable>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d137      	bne.n	8001146 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010f6:	d106      	bne.n	8001106 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	f023 0206 	bic.w	r2, r3, #6
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	659a      	str	r2, [r3, #88]	; 0x58
 8001104:	e002      	b.n	800110c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	221c      	movs	r2, #28
 8001112:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fe29 	bl	8000d96 <LL_ADC_REG_StartConversion>
 8001144:	e006      	b.n	8001154 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800114e:	e001      	b.n	8001154 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001150:	2302      	movs	r3, #2
 8001152:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe24 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d167      	bne.n	800124c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_ADC_Start_DMA+0x2a>
 8001186:	2302      	movs	r3, #2
 8001188:	e063      	b.n	8001252 <HAL_ADC_Start_DMA+0xf2>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 fbc6 	bl	8001924 <ADC_Enable>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d14f      	bne.n	8001242 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f023 0206 	bic.w	r2, r3, #6
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	659a      	str	r2, [r3, #88]	; 0x58
 80011ce:	e002      	b.n	80011d6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_ADC_Start_DMA+0xfc>)
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_ADC_Start_DMA+0x100>)
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <HAL_ADC_Start_DMA+0x104>)
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	221c      	movs	r2, #28
 80011f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0210 	orr.w	r2, r2, #16
 800120c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3340      	adds	r3, #64	; 0x40
 8001228:	4619      	mov	r1, r3
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f001 f8d1 	bl	80023d4 <HAL_DMA_Start_IT>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fdab 	bl	8000d96 <LL_ADC_REG_StartConversion>
 8001240:	e006      	b.n	8001250 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800124a:	e001      	b.n	8001250 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800124c:	2302      	movs	r3, #2
 800124e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	080019d9 	.word	0x080019d9
 8001260:	08001ab1 	.word	0x08001ab1
 8001264:	08001acd 	.word	0x08001acd

08001268 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0a6      	sub	sp, #152	; 0x98
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_ADC_ConfigChannel+0x22>
 800129a:	2302      	movs	r3, #2
 800129c:	e338      	b.n	8001910 <HAL_ADC_ConfigChannel+0x694>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd87 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 831d 	bne.w	80018f2 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d824      	bhi.n	800130a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	3b02      	subs	r3, #2
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d81b      	bhi.n	8001302 <HAL_ADC_ConfigChannel+0x86>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_ADC_ConfigChannel+0x54>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	080012e9 	.word	0x080012e9
 80012d8:	080012f1 	.word	0x080012f1
 80012dc:	080012f9 	.word	0x080012f9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	220c      	movs	r2, #12
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	e011      	b.n	800130c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2212      	movs	r2, #18
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	e00d      	b.n	800130c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2218      	movs	r2, #24
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e009      	b.n	800130c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	e004      	b.n	800130c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2206      	movs	r2, #6
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	e000      	b.n	800130c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800130a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	f7ff fc52 	bl	8000bc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fd4b 	bl	8000dbe <LL_ADC_REG_IsConversionOngoing>
 8001328:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fd57 	bl	8000de4 <LL_ADC_INJ_IsConversionOngoing>
 8001336:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800133a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 8148 	bne.w	80015d4 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 8143 	bne.w	80015d4 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	461a      	mov	r2, r3
 800135c:	f7ff fc5a 	bl	8000c14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00a      	beq.n	8001398 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6919      	ldr	r1, [r3, #16]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001392:	f7ff fbb5 	bl	8000b00 <LL_ADC_SetOffset>
 8001396:	e11d      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fbd0 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10a      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x148>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fbc5 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	0e9b      	lsrs	r3, r3, #26
 80013be:	f003 021f 	and.w	r2, r3, #31
 80013c2:	e012      	b.n	80013ea <HAL_ADC_ConfigChannel+0x16e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fbba 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x186>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0e9b      	lsrs	r3, r3, #26
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	e00a      	b.n	8001418 <HAL_ADC_ConfigChannel+0x19c>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	d106      	bne.n	800142a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fba1 	bl	8000b6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2101      	movs	r1, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb87 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10a      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x1da>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb7c 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	0e9b      	lsrs	r3, r3, #26
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	e010      	b.n	8001478 <HAL_ADC_ConfigChannel+0x1fc>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fb71 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001468:	fa93 f3a3 	rbit	r3, r3
 800146c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800146e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001480:	2b00      	cmp	r3, #0
 8001482:	d105      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x214>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0e9b      	lsrs	r3, r3, #26
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	e00a      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x22a>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800149e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d106      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	2101      	movs	r1, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb5a 	bl	8000b6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2102      	movs	r1, #2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb40 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10a      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x268>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2102      	movs	r1, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb35 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	0e9b      	lsrs	r3, r3, #26
 80014de:	f003 021f 	and.w	r2, r3, #31
 80014e2:	e010      	b.n	8001506 <HAL_ADC_ConfigChannel+0x28a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2102      	movs	r1, #2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fb2a 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80014fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <HAL_ADC_ConfigChannel+0x2a2>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0e9b      	lsrs	r3, r3, #26
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	e00a      	b.n	8001534 <HAL_ADC_ConfigChannel+0x2b8>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	429a      	cmp	r2, r3
 8001536:	d106      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	2102      	movs	r1, #2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fb13 	bl	8000b6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2103      	movs	r1, #3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff faf9 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10a      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x2f6>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2103      	movs	r1, #3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff faee 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	0e9b      	lsrs	r3, r3, #26
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	e010      	b.n	8001594 <HAL_ADC_ConfigChannel+0x318>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2103      	movs	r1, #3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fae3 	bl	8000b44 <LL_ADC_GetOffsetChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001584:	fa93 f3a3 	rbit	r3, r3
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800158a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x330>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0e9b      	lsrs	r3, r3, #26
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	e00a      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x346>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80015ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d106      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2200      	movs	r2, #0
 80015cc:	2103      	movs	r1, #3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff facc 	bl	8000b6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fbc9 	bl	8000d70 <LL_ADC_IsEnabled>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 810c 	bne.w	80017fe <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f7ff fb36 	bl	8000c64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4aa8      	ldr	r2, [pc, #672]	; (80018a0 <HAL_ADC_ConfigChannel+0x624>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	f040 80fd 	bne.w	80017fe <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10b      	bne.n	800162c <HAL_ADC_ConfigChannel+0x3b0>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0e9b      	lsrs	r3, r3, #26
 800161a:	3301      	adds	r3, #1
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2b09      	cmp	r3, #9
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	e012      	b.n	8001652 <HAL_ADC_ConfigChannel+0x3d6>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800163a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2b09      	cmp	r3, #9
 800164a:	bf94      	ite	ls
 800164c:	2301      	movls	r3, #1
 800164e:	2300      	movhi	r3, #0
 8001650:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001652:	2b00      	cmp	r3, #0
 8001654:	d064      	beq.n	8001720 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x3f6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0e9b      	lsrs	r3, r3, #26
 8001668:	3301      	adds	r3, #1
 800166a:	069b      	lsls	r3, r3, #26
 800166c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001670:	e00e      	b.n	8001690 <HAL_ADC_ConfigChannel+0x414>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	3301      	adds	r3, #1
 800168a:	069b      	lsls	r3, r3, #26
 800168c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x434>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0e9b      	lsrs	r3, r3, #26
 80016a2:	3301      	adds	r3, #1
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	e010      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x456>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	ea42 0103 	orr.w	r1, r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10a      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x47c>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	3301      	adds	r3, #1
 80016ea:	f003 021f 	and.w	r2, r3, #31
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	e011      	b.n	800171c <HAL_ADC_ConfigChannel+0x4a0>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3301      	adds	r3, #1
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800171c:	430b      	orrs	r3, r1
 800171e:	e069      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <HAL_ADC_ConfigChannel+0x4c0>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0e9b      	lsrs	r3, r3, #26
 8001732:	3301      	adds	r3, #1
 8001734:	069b      	lsls	r3, r3, #26
 8001736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800173a:	e00e      	b.n	800175a <HAL_ADC_ConfigChannel+0x4de>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	61fb      	str	r3, [r7, #28]
  return result;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3301      	adds	r3, #1
 8001754:	069b      	lsls	r3, r3, #26
 8001756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ADC_ConfigChannel+0x4fe>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0e9b      	lsrs	r3, r3, #26
 800176c:	3301      	adds	r3, #1
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	e010      	b.n	800179c <HAL_ADC_ConfigChannel+0x520>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	617b      	str	r3, [r7, #20]
  return result;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	ea42 0103 	orr.w	r1, r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x54c>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	3301      	adds	r3, #1
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	3b1e      	subs	r3, #30
 80017c0:	051b      	lsls	r3, r3, #20
 80017c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c6:	e014      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x576>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	60fb      	str	r3, [r7, #12]
  return result;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	3b1e      	subs	r3, #30
 80017ec:	051b      	lsls	r3, r3, #20
 80017ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017f2:	430b      	orrs	r3, r1
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	6892      	ldr	r2, [r2, #8]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff fa0b 	bl	8000c14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <HAL_ADC_ConfigChannel+0x628>)
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d07c      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800180a:	4827      	ldr	r0, [pc, #156]	; (80018a8 <HAL_ADC_ConfigChannel+0x62c>)
 800180c:	f7ff f96a 	bl	8000ae4 <LL_ADC_GetCommonPathInternalCh>
 8001810:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a24      	ldr	r2, [pc, #144]	; (80018ac <HAL_ADC_ConfigChannel+0x630>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d126      	bne.n	800186c <HAL_ADC_ConfigChannel+0x5f0>
 800181e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d120      	bne.n	800186c <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_ADC_ConfigChannel+0x634>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d167      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800183c:	4619      	mov	r1, r3
 800183e:	481a      	ldr	r0, [pc, #104]	; (80018a8 <HAL_ADC_ConfigChannel+0x62c>)
 8001840:	f7ff f93d 	bl	8000abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_ADC_ConfigChannel+0x638>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_ADC_ConfigChannel+0x63c>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099a      	lsrs	r2, r3, #6
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800185c:	e002      	b.n	8001864 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800186a:	e04b      	b.n	8001904 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_ADC_ConfigChannel+0x640>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d124      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x644>
 8001876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800187a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11e      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_ADC_ConfigChannel+0x634>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d13b      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800188c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001894:	4619      	mov	r1, r3
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <HAL_ADC_ConfigChannel+0x62c>)
 8001898:	f7ff f911 	bl	8000abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800189c:	e032      	b.n	8001904 <HAL_ADC_ConfigChannel+0x688>
 800189e:	bf00      	nop
 80018a0:	407f0000 	.word	0x407f0000
 80018a4:	80080000 	.word	0x80080000
 80018a8:	50040300 	.word	0x50040300
 80018ac:	c7520000 	.word	0xc7520000
 80018b0:	50040000 	.word	0x50040000
 80018b4:	20000008 	.word	0x20000008
 80018b8:	053e2d63 	.word	0x053e2d63
 80018bc:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_ADC_ConfigChannel+0x69c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d11c      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_ADC_ConfigChannel+0x6a0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e8:	4619      	mov	r1, r3
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <HAL_ADC_ConfigChannel+0x6a4>)
 80018ec:	f7ff f8e7 	bl	8000abe <LL_ADC_SetCommonPathInternalCh>
 80018f0:	e008      	b.n	8001904 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800190c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001910:	4618      	mov	r0, r3
 8001912:	3798      	adds	r7, #152	; 0x98
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	80000001 	.word	0x80000001
 800191c:	50040000 	.word	0x50040000
 8001920:	50040300 	.word	0x50040300

08001924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa1d 	bl	8000d70 <LL_ADC_IsEnabled>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d146      	bne.n	80019ca <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <ADC_Enable+0xb0>)
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0210 	orr.w	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e032      	b.n	80019cc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f9ec 	bl	8000d48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001970:	f7ff f886 	bl	8000a80 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001976:	e021      	b.n	80019bc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f9f7 	bl	8000d70 <LL_ADC_IsEnabled>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d104      	bne.n	8001992 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f9db 	bl	8000d48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001992:	f7ff f875 	bl	8000a80 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d90d      	bls.n	80019bc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d1d6      	bne.n	8001978 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	8000003f 	.word	0x8000003f

080019d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d14b      	bne.n	8001a8a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d021      	beq.n	8001a50 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f8c3 	bl	8000b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d032      	beq.n	8001a82 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d12b      	bne.n	8001a82 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d11f      	bne.n	8001a82 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001a4e:	e018      	b.n	8001a82 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d111      	bne.n	8001a82 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7fe fdea 	bl	800065c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a88:	e00e      	b.n	8001aa8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff fbe6 	bl	8001268 <HAL_ADC_ErrorCallback>
}
 8001a9c:	e004      	b.n	8001aa8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7fe fdc2 	bl	8000648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fbb8 	bl	8001268 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0ed      	b.n	8001cee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fe4e 	bl	80007c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0202 	bic.w	r2, r2, #2
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7fe ffa4 	bl	8000a80 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b3a:	e012      	b.n	8001b62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b3c:	f7fe ffa0 	bl	8000a80 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b0a      	cmp	r3, #10
 8001b48:	d90b      	bls.n	8001b62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2205      	movs	r2, #5
 8001b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0c5      	b.n	8001cee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e5      	bne.n	8001b3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b80:	f7fe ff7e 	bl	8000a80 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b86:	e012      	b.n	8001bae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b88:	f7fe ff7a 	bl	8000a80 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b0a      	cmp	r3, #10
 8001b94:	d90b      	bls.n	8001bae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e09f      	b.n	8001cee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0e5      	beq.n	8001b88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7e1b      	ldrb	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d108      	bne.n	8001bd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e007      	b.n	8001be6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7e5b      	ldrb	r3, [r3, #25]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e007      	b.n	8001c10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e9b      	ldrb	r3, [r3, #26]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e007      	b.n	8001c3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0220 	bic.w	r2, r2, #32
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7edb      	ldrb	r3, [r3, #27]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d108      	bne.n	8001c54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0210 	bic.w	r2, r2, #16
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e007      	b.n	8001c64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0210 	orr.w	r2, r2, #16
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7f1b      	ldrb	r3, [r3, #28]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0208 	orr.w	r2, r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0208 	bic.w	r2, r2, #8
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7f5b      	ldrb	r3, [r3, #29]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0204 	orr.w	r2, r2, #4
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0204 	bic.w	r2, r2, #4
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	ea42 0103 	orr.w	r1, r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_ConfigFilter+0x26>
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	f040 80aa 	bne.w	8001e70 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	2201      	movs	r2, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d123      	bne.n	8001d9e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	401a      	ands	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3248      	adds	r2, #72	; 0x48
 8001d7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d94:	6979      	ldr	r1, [r7, #20]
 8001d96:	3348      	adds	r3, #72	; 0x48
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d122      	bne.n	8001dec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dc6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3248      	adds	r2, #72	; 0x48
 8001dcc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001de0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	3348      	adds	r3, #72	; 0x48
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e06:	e007      	b.n	8001e18 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e62:	f023 0201 	bic.w	r2, r3, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e006      	b.n	8001e7e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b089      	sub	sp, #36	; 0x24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea8:	7ffb      	ldrb	r3, [r7, #31]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <HAL_CAN_AddTxMessage+0x2c>
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	f040 80b8 	bne.w	8002026 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a0 	beq.w	8002016 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	0e1b      	lsrs	r3, r3, #24
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d907      	bls.n	8001ef6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e09e      	b.n	8002034 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	6809      	ldr	r1, [r1, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	440b      	add	r3, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e00f      	b.n	8001f44 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f2e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f38:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	440b      	add	r3, r1
 8001f42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3318      	adds	r3, #24
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	7d1b      	ldrb	r3, [r3, #20]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d111      	bne.n	8001f84 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3318      	adds	r3, #24
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	6811      	ldr	r1, [r2, #0]
 8001f74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	440b      	add	r3, r1
 8001f80:	3304      	adds	r3, #4
 8001f82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3307      	adds	r3, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	061a      	lsls	r2, r3, #24
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3306      	adds	r3, #6
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3305      	adds	r3, #5
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	3204      	adds	r2, #4
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	6811      	ldr	r1, [r2, #0]
 8001fac:	ea43 0200 	orr.w	r2, r3, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	061a      	lsls	r2, r3, #24
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	4610      	mov	r0, r2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	6811      	ldr	r1, [r2, #0]
 8001fe2:	ea43 0200 	orr.w	r2, r3, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ff0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6811      	ldr	r1, [r2, #0]
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3318      	adds	r3, #24
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	440b      	add	r3, r1
 8002010:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e00e      	b.n	8002034 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e006      	b.n	8002034 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	3724      	adds	r7, #36	; 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff3e 	bl	8002088 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff8e 	bl	8002134 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5d 	bl	80020e0 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff31 	bl	80020a4 <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e098      	b.n	80023a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <HAL_DMA_Init+0x150>)
 800227e:	429a      	cmp	r2, r3
 8002280:	d80f      	bhi.n	80022a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_DMA_Init+0x154>)
 800228a:	4413      	add	r3, r2
 800228c:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_DMA_Init+0x158>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a48      	ldr	r2, [pc, #288]	; (80023c0 <HAL_DMA_Init+0x15c>)
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
 80022a0:	e00e      	b.n	80022c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <HAL_DMA_Init+0x160>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_DMA_Init+0x158>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_DMA_Init+0x164>)
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800231a:	d039      	beq.n	8002390 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_DMA_Init+0x15c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d11a      	bne.n	800235c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_DMA_Init+0x168>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f003 031c 	and.w	r3, r3, #28
 8002332:	210f      	movs	r1, #15
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	4924      	ldr	r1, [pc, #144]	; (80023cc <HAL_DMA_Init+0x168>)
 800233c:	4013      	ands	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_DMA_Init+0x168>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 031c 	and.w	r3, r3, #28
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	491d      	ldr	r1, [pc, #116]	; (80023cc <HAL_DMA_Init+0x168>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
 800235a:	e019      	b.n	8002390 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_DMA_Init+0x16c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f003 031c 	and.w	r3, r3, #28
 8002368:	210f      	movs	r1, #15
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	4917      	ldr	r1, [pc, #92]	; (80023d0 <HAL_DMA_Init+0x16c>)
 8002372:	4013      	ands	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_DMA_Init+0x16c>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f003 031c 	and.w	r3, r3, #28
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	4911      	ldr	r1, [pc, #68]	; (80023d0 <HAL_DMA_Init+0x16c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40020407 	.word	0x40020407
 80023b8:	bffdfff8 	.word	0xbffdfff8
 80023bc:	cccccccd 	.word	0xcccccccd
 80023c0:	40020000 	.word	0x40020000
 80023c4:	bffdfbf8 	.word	0xbffdfbf8
 80023c8:	40020400 	.word	0x40020400
 80023cc:	400200a8 	.word	0x400200a8
 80023d0:	400204a8 	.word	0x400204a8

080023d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_DMA_Start_IT+0x20>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e04b      	b.n	800248c <HAL_DMA_Start_IT+0xb8>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d13a      	bne.n	800247e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f8e0 	bl	80025f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 020e 	orr.w	r2, r2, #14
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e00f      	b.n	800246c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0204 	bic.w	r2, r2, #4
 800245a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 020a 	orr.w	r2, r2, #10
 800246a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e005      	b.n	800248a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f003 031c 	and.w	r3, r3, #28
 80024b4:	2204      	movs	r2, #4
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d026      	beq.n	800250e <HAL_DMA_IRQHandler+0x7a>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f003 021c 	and.w	r2, r3, #28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2104      	movs	r1, #4
 80024f6:	fa01 f202 	lsl.w	r2, r1, r2
 80024fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	2b00      	cmp	r3, #0
 8002502:	d071      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800250c:	e06c      	b.n	80025e8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f003 031c 	and.w	r3, r3, #28
 8002516:	2202      	movs	r2, #2
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02e      	beq.n	8002580 <HAL_DMA_IRQHandler+0xec>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d029      	beq.n	8002580 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10b      	bne.n	8002552 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 020a 	bic.w	r2, r2, #10
 8002548:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f003 021c 	and.w	r2, r3, #28
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2102      	movs	r1, #2
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d038      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800257e:	e033      	b.n	80025e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f003 031c 	and.w	r3, r3, #28
 8002588:	2208      	movs	r2, #8
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02a      	beq.n	80025ea <HAL_DMA_IRQHandler+0x156>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d025      	beq.n	80025ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 020e 	bic.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 021c 	and.w	r2, r3, #28
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
}
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f003 021c 	and.w	r2, r3, #28
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d108      	bne.n	8002636 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002634:	e007      	b.n	8002646 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	60da      	str	r2, [r3, #12]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002662:	e148      	b.n	80028f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 813a 	beq.w	80028f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d00b      	beq.n	800269c <HAL_GPIO_Init+0x48>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002690:	2b11      	cmp	r3, #17
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b12      	cmp	r3, #18
 800269a:	d130      	bne.n	80026fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d2:	2201      	movs	r2, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0201 	and.w	r2, r3, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0xea>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b12      	cmp	r3, #18
 800273c:	d123      	bne.n	8002786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	6939      	ldr	r1, [r7, #16]
 8002782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8094 	beq.w	80028f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c8:	4b52      	ldr	r3, [pc, #328]	; (8002914 <HAL_GPIO_Init+0x2c0>)
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	4a51      	ldr	r2, [pc, #324]	; (8002914 <HAL_GPIO_Init+0x2c0>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6613      	str	r3, [r2, #96]	; 0x60
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_GPIO_Init+0x2c0>)
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027e0:	4a4d      	ldr	r2, [pc, #308]	; (8002918 <HAL_GPIO_Init+0x2c4>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_Init+0x1d4>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a43      	ldr	r2, [pc, #268]	; (800291c <HAL_GPIO_Init+0x2c8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_Init+0x1d0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a42      	ldr	r2, [pc, #264]	; (8002920 <HAL_GPIO_Init+0x2cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_Init+0x1cc>
 800281c:	2302      	movs	r3, #2
 800281e:	e004      	b.n	800282a <HAL_GPIO_Init+0x1d6>
 8002820:	2307      	movs	r3, #7
 8002822:	e002      	b.n	800282a <HAL_GPIO_Init+0x1d6>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_GPIO_Init+0x1d6>
 8002828:	2300      	movs	r3, #0
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	f002 0203 	and.w	r2, r2, #3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4093      	lsls	r3, r2
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800283a:	4937      	ldr	r1, [pc, #220]	; (8002918 <HAL_GPIO_Init+0x2c4>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800286c:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ea:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3301      	adds	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f aeaf 	bne.w	8002664 <HAL_GPIO_Init+0x10>
  }
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40010000 	.word	0x40010000
 800291c:	48000400 	.word	0x48000400
 8002920:	48000800 	.word	0x48000800
 8002924:	40010400 	.word	0x40010400

08002928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e001      	b.n	800294a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002974:	e002      	b.n	800297c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029a0:	887a      	ldrh	r2, [r7, #2]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80029a6:	e002      	b.n	80029ae <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e080      	b.n	8002ad0 <HAL_LPTIM_Init+0x114>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fd ff30 	bl	8000848 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d004      	beq.n	8002a0a <HAL_LPTIM_Init+0x4e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a08:	d103      	bne.n	8002a12 <HAL_LPTIM_Init+0x56>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 031e 	bic.w	r3, r3, #30
 8002a10:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d005      	beq.n	8002a2a <HAL_LPTIM_Init+0x6e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_LPTIM_Init+0x11c>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002a3a:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002a40:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002a46:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002a4c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d004      	beq.n	8002a66 <HAL_LPTIM_Init+0xaa>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a64:	d107      	bne.n	8002a76 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00a      	beq.n	8002a98 <HAL_LPTIM_Init+0xdc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002a8a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002a90:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <HAL_LPTIM_Init+0x120>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d108      	bne.n	8002abc <HAL_LPTIM_Init+0x100>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	621a      	str	r2, [r3, #32]
 8002aba:	e004      	b.n	8002ac6 <HAL_LPTIM_Init+0x10a>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ac4:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	ff19f1f8 	.word	0xff19f1f8
 8002adc:	40007c00 	.word	0x40007c00

08002ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0a:	d130      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d038      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b40:	e002      	b.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	d110      	bne.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d007      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f000 bc11 	b.w	80033de <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbc:	4ba0      	ldr	r3, [pc, #640]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc6:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80e4 	beq.w	8002da6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4c>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	f040 808b 	bne.w	8002d02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 8087 	bne.w	8002d02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf4:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x64>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e3e8      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <HAL_RCC_OscConfig+0x7e>
 8002c1c:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c24:	e005      	b.n	8002c32 <HAL_RCC_OscConfig+0x8a>
 8002c26:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d223      	bcs.n	8002c7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fd40 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e3c9      	b.n	80033de <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4977      	ldr	r1, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c68:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	4972      	ldr	r1, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
 8002c7c:	e025      	b.n	8002cca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7e:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	496a      	ldr	r1, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	4965      	ldr	r1, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fd00 	bl	80036c0 <RCC_SetFlashLatencyFromMSIRange>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e389      	b.n	80033de <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cca:	f000 fc6f 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a5a      	ldr	r2, [pc, #360]	; (8002e44 <HAL_RCC_OscConfig+0x29c>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce6:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x2a0>)
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cea:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_RCC_OscConfig+0x2a4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fe7a 	bl	80009e8 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d052      	beq.n	8002da4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	e36d      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d032      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d0a:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4c      	ldr	r2, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d16:	f7fd feb3 	bl	8000a80 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1e:	f7fd feaf 	bl	8000a80 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e356      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d30:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3c:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3f      	ldr	r2, [pc, #252]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	493a      	ldr	r1, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5a:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4935      	ldr	r1, [pc, #212]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
 8002d6e:	e01a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d7c:	f7fd fe80 	bl	8000a80 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d84:	f7fd fe7c 	bl	8000a80 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e323      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d96:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1dc>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d073      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x21c>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d10e      	bne.n	8002ddc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d063      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d15f      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e300      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x24c>
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0x288>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x270>
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x288>
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <HAL_RCC_OscConfig+0x298>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fd fe22 	bl	8000a80 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3e:	e010      	b.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08003db4 	.word	0x08003db4
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fd fe16 	bl	8000a80 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e2bd      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e62:	4baf      	ldr	r3, [pc, #700]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x2a8>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fd fe06 	bl	8000a80 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fd fe02 	bl	8000a80 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e2a9      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8a:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2d0>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d060      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x310>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d119      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d116      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	4b99      	ldr	r3, [pc, #612]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x328>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e286      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b93      	ldr	r3, [pc, #588]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	4990      	ldr	r1, [pc, #576]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	e040      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eee:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a8b      	ldr	r2, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fd fdc1 	bl	8000a80 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7fd fdbd 	bl	8000a80 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e264      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	497c      	ldr	r1, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fd fd9d 	bl	8000a80 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fd fd99 	bl	8000a80 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e240      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7c:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fd fd78 	bl	8000a80 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fd fd74 	bl	8000a80 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e21b      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3ec>
 8002fb4:	e01b      	b.n	8002fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fd fd5b 	bl	8000a80 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fd fd57 	bl	8000a80 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1fe      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ef      	bne.n	8002fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80a6 	beq.w	8003148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7fd fd1e 	bl	8000a80 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fd fd1a 	bl	8000a80 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1c1      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x57c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d108      	bne.n	8003080 <HAL_RCC_OscConfig+0x4d8>
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307e:	e024      	b.n	80030ca <HAL_RCC_OscConfig+0x522>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d110      	bne.n	80030aa <HAL_RCC_OscConfig+0x502>
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a24      	ldr	r2, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	e00f      	b.n	80030ca <HAL_RCC_OscConfig+0x522>
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fd fcd5 	bl	8000a80 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fd fcd1 	bl	8000a80 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e176      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x578>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ed      	beq.n	80030da <HAL_RCC_OscConfig+0x532>
 80030fe:	e01a      	b.n	8003136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fd fcbe 	bl	8000a80 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003106:	e00f      	b.n	8003128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fd fcba 	bl	8000a80 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d906      	bls.n	8003128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e15f      	b.n	80033de <HAL_RCC_OscConfig+0x836>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003128:	4baa      	ldr	r3, [pc, #680]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e8      	bne.n	8003108 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313c:	4ba5      	ldr	r3, [pc, #660]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4aa4      	ldr	r2, [pc, #656]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d03c      	beq.n	80031ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01c      	beq.n	8003196 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800315c:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800315e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003162:	4a9c      	ldr	r2, [pc, #624]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fd fc88 	bl	8000a80 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003174:	f7fd fc84 	bl	8000a80 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e12b      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003186:	4b93      	ldr	r3, [pc, #588]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ef      	beq.n	8003174 <HAL_RCC_OscConfig+0x5cc>
 8003194:	e01b      	b.n	80031ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003196:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319c:	4a8d      	ldr	r2, [pc, #564]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fd fc6b 	bl	8000a80 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ae:	f7fd fc67 	bl	8000a80 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e10e      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c0:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80031c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ef      	bne.n	80031ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8102 	beq.w	80033dc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b02      	cmp	r3, #2
 80031de:	f040 80c5 	bne.w	800336c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031e2:	4b7c      	ldr	r3, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0203 	and.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d12c      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	3b01      	subs	r3, #1
 8003202:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d123      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d11b      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d113      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d109      	bne.n	8003250 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d067      	beq.n	8003320 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d062      	beq.n	800331c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0bb      	b.n	80033de <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5a      	ldr	r2, [pc, #360]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003272:	f7fd fc05 	bl	8000a80 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fd fc01 	bl	8000a80 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0a8      	b.n	80033de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003298:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <HAL_RCC_OscConfig+0x830>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b2:	0212      	lsls	r2, r2, #8
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0552      	lsls	r2, r2, #21
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c6:	0852      	lsrs	r2, r2, #1
 80032c8:	3a01      	subs	r2, #1
 80032ca:	0652      	lsls	r2, r2, #25
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d2:	06d2      	lsls	r2, r2, #27
 80032d4:	430a      	orrs	r2, r1
 80032d6:	493f      	ldr	r1, [pc, #252]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f4:	f7fd fbc4 	bl	8000a80 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fd fbc0 	bl	8000a80 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e067      	b.n	80033de <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331a:	e05f      	b.n	80033dc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e05e      	b.n	80033de <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d157      	bne.n	80033dc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003344:	f7fd fb9c 	bl	8000a80 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd fb98 	bl	8000a80 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e03f      	b.n	80033de <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x7a4>
 800336a:	e037      	b.n	80033dc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d02d      	beq.n	80033ce <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003390:	f023 0303 	bic.w	r3, r3, #3
 8003394:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 800339c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fd fb6b 	bl	8000a80 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fd fb67 	bl	8000a80 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e00e      	b.n	80033de <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_RCC_OscConfig+0x82c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x806>
 80033cc:	e006      	b.n	80033dc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e005      	b.n	80033de <HAL_RCC_OscConfig+0x836>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0c8      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b66      	ldr	r3, [pc, #408]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4961      	ldr	r1, [pc, #388]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b0      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d04c      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d107      	bne.n	8003450 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003440:	4b56      	ldr	r3, [pc, #344]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d121      	bne.n	8003490 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e09e      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d107      	bne.n	8003468 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003458:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d115      	bne.n	8003490 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e092      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003470:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e086      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003480:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e07e      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 0203 	bic.w	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	493f      	ldr	r1, [pc, #252]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a2:	f7fd faed 	bl	8000a80 <HAL_GetTick>
 80034a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034aa:	f7fd fae9 	bl	8000a80 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e066      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 020c 	and.w	r2, r3, #12
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d1eb      	bne.n	80034aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034de:	4b2f      	ldr	r3, [pc, #188]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	492c      	ldr	r1, [pc, #176]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f0:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d210      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 0207 	bic.w	r2, r3, #7
 8003506:	4924      	ldr	r1, [pc, #144]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_ClockConfig+0x1b0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e036      	b.n	800358e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4918      	ldr	r1, [pc, #96]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4910      	ldr	r1, [pc, #64]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800355e:	f000 f825 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8003562:	4601      	mov	r1, r0
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_ClockConfig+0x1b4>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	5cd3      	ldrb	r3, [r2, r3]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	fa21 f303 	lsr.w	r3, r1, r3
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd fa30 	bl	80009e8 <HAL_InitTick>
 8003588:	4603      	mov	r3, r0
 800358a:	72fb      	strb	r3, [r7, #11]

  return status;
 800358c:	7afb      	ldrb	r3, [r7, #11]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
 80035a0:	08003db4 	.word	0x08003db4
 80035a4:	20000008 	.word	0x20000008
 80035a8:	2000000c 	.word	0x2000000c

080035ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ba:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x34>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d121      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d11e      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035e0:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e005      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035fc:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003608:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d102      	bne.n	800362a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e004      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d101      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003632:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d133      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800363a:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d002      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0xa4>
 800364a:	2b03      	cmp	r3, #3
 800364c:	d003      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0xaa>
 800364e:	e005      	b.n	800365c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003652:	617b      	str	r3, [r7, #20]
      break;
 8003654:	e005      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003658:	617b      	str	r3, [r7, #20]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	617b      	str	r3, [r7, #20]
      break;
 8003660:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	3301      	adds	r3, #1
 800366e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	fb02 f203 	mul.w	r2, r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	0e5b      	lsrs	r3, r3, #25
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036a2:	69bb      	ldr	r3, [r7, #24]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3724      	adds	r7, #36	; 0x24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08003dc4 	.word	0x08003dc4
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	007a1200 	.word	0x007a1200

080036c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d8:	f7ff fa02 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 80036dc:	6178      	str	r0, [r7, #20]
 80036de:	e014      	b.n	800370a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	4a24      	ldr	r2, [pc, #144]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	; 0x58
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f8:	f7ff f9f2 	bl	8002ae0 <HAL_PWREx_GetVoltageRange>
 80036fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	d10b      	bne.n	800372a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d919      	bls.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2ba0      	cmp	r3, #160	; 0xa0
 800371c:	d902      	bls.n	8003724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800371e:	2302      	movs	r3, #2
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e013      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003724:	2301      	movs	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e010      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d902      	bls.n	8003736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003730:	2303      	movs	r3, #3
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	e00a      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d102      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800373c:	2302      	movs	r3, #2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	e004      	b.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b70      	cmp	r3, #112	; 0x70
 8003746:	d101      	bne.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003748:	2301      	movs	r3, #1
 800374a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 0207 	bic.w	r2, r3, #7
 8003754:	4909      	ldr	r1, [pc, #36]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	40022000 	.word	0x40022000

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003788:	2300      	movs	r3, #0
 800378a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378c:	2300      	movs	r3, #0
 800378e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	2b00      	cmp	r3, #0
 800379a:	d02f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037a4:	d005      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037aa:	d015      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037b0:	e00f      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037b2:	4bac      	ldr	r3, [pc, #688]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4aab      	ldr	r2, [pc, #684]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037be:	e00c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f9cc 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	74fb      	strb	r3, [r7, #19]
      break;
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80037d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e0:	4ba0      	ldr	r3, [pc, #640]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	499d      	ldr	r1, [pc, #628]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037f6:	e001      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8099 	beq.w	800393c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800380e:	4b95      	ldr	r3, [pc, #596]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003824:	4b8f      	ldr	r3, [pc, #572]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	4a8e      	ldr	r2, [pc, #568]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800382a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382e:	6593      	str	r3, [r2, #88]	; 0x58
 8003830:	4b8c      	ldr	r3, [pc, #560]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383c:	2301      	movs	r3, #1
 800383e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003840:	4b89      	ldr	r3, [pc, #548]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a88      	ldr	r2, [pc, #544]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800384c:	f7fd f918 	bl	8000a80 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fd f914 	bl	8000a80 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	74fb      	strb	r3, [r7, #19]
        break;
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003868:	4b7f      	ldr	r3, [pc, #508]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d155      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800387a:	4b7a      	ldr	r3, [pc, #488]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003884:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01e      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	429a      	cmp	r2, r3
 8003894:	d019      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003896:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a2:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	4a6e      	ldr	r2, [pc, #440]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b2:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	4a6a      	ldr	r2, [pc, #424]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c2:	4a68      	ldr	r2, [pc, #416]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd f8d4 	bl	8000a80 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	e00b      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fd f8d0 	bl	8000a80 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d902      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	74fb      	strb	r3, [r7, #19]
            break;
 80038f2:	e006      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f4:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ec      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003908:	4b56      	ldr	r3, [pc, #344]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	4953      	ldr	r1, [pc, #332]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392a:	7c7b      	ldrb	r3, [r7, #17]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b4c      	ldr	r3, [pc, #304]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003948:	4b46      	ldr	r3, [pc, #280]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	4943      	ldr	r1, [pc, #268]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800396a:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f023 020c 	bic.w	r2, r3, #12
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	493a      	ldr	r1, [pc, #232]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	4932      	ldr	r1, [pc, #200]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	4929      	ldr	r1, [pc, #164]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	4921      	ldr	r1, [pc, #132]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	4918      	ldr	r1, [pc, #96]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4910      	ldr	r1, [pc, #64]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4907      	ldr	r1, [pc, #28]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a54:	d10a      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a56:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a02      	ldr	r2, [pc, #8]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a60:	60d3      	str	r3, [r2, #12]
 8003a62:	e015      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f871 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d028      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a9c:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	492d      	ldr	r1, [pc, #180]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aba:	d106      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	e011      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f842 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01c      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	4915      	ldr	r1, [pc, #84]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f81f 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	4904      	ldr	r1, [pc, #16]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000

08003b64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b72:	4b73      	ldr	r3, [pc, #460]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b7e:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d10d      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
       ||
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b96:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d044      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	e041      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d00c      	beq.n	8003bd2 <RCCEx_PLLSAI1_Config+0x6e>
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d013      	beq.n	8003be4 <RCCEx_PLLSAI1_Config+0x80>
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d120      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc0:	4b5f      	ldr	r3, [pc, #380]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11d      	bne.n	8003c08 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd0:	e01a      	b.n	8003c08 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd2:	4b5b      	ldr	r3, [pc, #364]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be2:	e013      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be4:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10f      	bne.n	8003c10 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c00:	e006      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      break;
 8003c06:	e004      	b.n	8003c12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c10:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c18:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	4944      	ldr	r1, [pc, #272]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d17c      	bne.n	8003d34 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a40      	ldr	r2, [pc, #256]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c46:	f7fc ff1b 	bl	8000a80 <HAL_GetTick>
 8003c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4c:	e009      	b.n	8003c62 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c4e:	f7fc ff17 	bl	8000a80 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d902      	bls.n	8003c62 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c60:	e005      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ef      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d15f      	bne.n	8003d34 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d110      	bne.n	8003c9c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	0211      	lsls	r1, r2, #8
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68d2      	ldr	r2, [r2, #12]
 8003c90:	06d2      	lsls	r2, r2, #27
 8003c92:	430a      	orrs	r2, r1
 8003c94:	492a      	ldr	r1, [pc, #168]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	610b      	str	r3, [r1, #16]
 8003c9a:	e027      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d112      	bne.n	8003cc8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca2:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003caa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	0211      	lsls	r1, r2, #8
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6912      	ldr	r2, [r2, #16]
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	0552      	lsls	r2, r2, #21
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	491f      	ldr	r1, [pc, #124]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	610b      	str	r3, [r1, #16]
 8003cc6:	e011      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
 8003cd8:	0211      	lsls	r1, r2, #8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6952      	ldr	r2, [r2, #20]
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0652      	lsls	r2, r2, #25
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	4916      	ldr	r1, [pc, #88]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fc fec2 	bl	8000a80 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cfe:	e009      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d00:	f7fc febe 	bl	8000a80 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	73fb      	strb	r3, [r7, #15]
          break;
 8003d12:	e005      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ef      	beq.n	8003d00 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	4904      	ldr	r1, [pc, #16]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4e0d      	ldr	r6, [pc, #52]	; (8003d7c <__libc_init_array+0x38>)
 8003d48:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <__libc_init_array+0x3c>)
 8003d4a:	1ba4      	subs	r4, r4, r6
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	2500      	movs	r5, #0
 8003d50:	42a5      	cmp	r5, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	4e0b      	ldr	r6, [pc, #44]	; (8003d84 <__libc_init_array+0x40>)
 8003d56:	4c0c      	ldr	r4, [pc, #48]	; (8003d88 <__libc_init_array+0x44>)
 8003d58:	f000 f820 	bl	8003d9c <_init>
 8003d5c:	1ba4      	subs	r4, r4, r6
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	2500      	movs	r5, #0
 8003d62:	42a5      	cmp	r5, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d6c:	4798      	blx	r3
 8003d6e:	3501      	adds	r5, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d76:	4798      	blx	r3
 8003d78:	3501      	adds	r5, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	08003df4 	.word	0x08003df4
 8003d80:	08003df4 	.word	0x08003df4
 8003d84:	08003df4 	.word	0x08003df4
 8003d88:	08003df8 	.word	0x08003df8

08003d8c <memset>:
 8003d8c:	4402      	add	r2, r0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d100      	bne.n	8003d96 <memset+0xa>
 8003d94:	4770      	bx	lr
 8003d96:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9a:	e7f9      	b.n	8003d90 <memset+0x4>

08003d9c <_init>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr

08003da8 <_fini>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr
